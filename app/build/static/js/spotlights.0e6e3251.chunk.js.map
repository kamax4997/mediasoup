{"version":3,"sources":["Spotlights.js"],"names":["logger","Logger","Spotlights","maxSpotlights","signalingSocket","_signalingSocket","_maxSpotlights","_peerList","_unmutablePeerList","_selectedSpotlights","_fixedSpotlight","_currentSpotlights","_started","_page","_roomType","this","_handleSignaling","_spotlightsUpdated","peers","peer","_newPeer","id","pageNum","roomType","console","log","peerId","indexOf","newSelectedPeer","length","index","i","includes","debug","on","notification","method","data","_closePeer","push","filter","speakerList","Set","splice","concat","spotlights","start","end","_arraysEqual","slice","emit","arr1","arr2","oldMaxSpotlights","EventEmitter"],"mappings":"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","file":"static/js/spotlights.0e6e3251.chunk.js","sourcesContent":["import { EventEmitter } from 'events';\nimport Logger from './Logger';\n\nconst logger = new Logger('Spotlight');\n\nexport default class Spotlights extends EventEmitter\n{\n\tconstructor(maxSpotlights, signalingSocket)\n\t{\n\t\tsuper();\n\n\t\tthis._signalingSocket = signalingSocket;\n\t\tthis._maxSpotlights = maxSpotlights;\n\t\tthis._peerList = [];\n\t\tthis._unmutablePeerList = [];\n\t\tthis._selectedSpotlights = [];\n\t\tthis._fixedSpotlight = [];\n\t\tthis._currentSpotlights = [];\n\t\tthis._started = false;\n\t\tthis._page = 0;\n\t\tthis._roomType = \"\";\n\t}\n\n\tstart()\n\t{\n\t\tthis._handleSignaling();\n\n\t\tthis._started = true;\n\t\tthis._spotlightsUpdated();\n\t}\n\n\taddPeers(peers)\n\t{\n\t\tfor (const peer of peers)\n\t\t{\n\t\t\tthis._newPeer(peer.id);\n\t\t}\n\t}\n\n\tsetPage(pageNum)\n\t{\n\t\tthis._page = pageNum;\n\t\tthis._spotlightsUpdated();\n\t}\n\n\tsetRoomType(roomType)\n\t{\n\t\tconsole.log('setting roomType: '+ roomType);\n\t\tthis._roomType = roomType;\n\t\t//this._spotlightsUpdated();\n\t}\n\t\n\tgetPage(pageNum)\n\t{\n\t\treturn this._page;\n\t}\n\tpeerInSpotlights(peerId)\n\t{\n\t\tif (this._started)\n\t\t{\n\t\t\treturn this._currentSpotlights.indexOf(peerId) !== -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n    getCurrent(){\n\t\treturn this._currentSpotlights;\n\n\t}\n\tgetNextAsSelected(peerId)\n\t{\n\t\tlet newSelectedPeer = null;\n\n\t\tif (peerId == null && this._unmutablePeerList.length > 0)\n\t\t{\n\t\t\tpeerId = this._unmutablePeerList[0];\n\t\t}\n\n\t\tif (peerId != null && this._currentSpotlights.length < this._unmutablePeerList.length)\n\t\t{\n\t\t\tconst oldIndex = this._unmutablePeerList.indexOf(peerId);\n\n\t\t\tlet index = oldIndex;\n\n\t\t\tindex++;\n\t\t\tfor (let i = 0; i < this._unmutablePeerList.length; i++)\n\t\t\t{\n\t\t\t\tif (index >= this._unmutablePeerList.length)\n\t\t\t\t{\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t\tnewSelectedPeer = this._unmutablePeerList[index];\n\t\t\t\tif (!this._currentSpotlights.includes(newSelectedPeer))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn newSelectedPeer;\n\t}\n\n\tgetPrevAsSelected(peerId)\n\t{\n\t\tlet newSelectedPeer = null;\n\n\t\tif (peerId == null && this._unmutablePeerList.length > 0)\n\t\t{\n\t\t\tpeerId = this._unmutablePeerList[0];\n\t\t}\n\n\t\tif (peerId != null && this._currentSpotlights.length < this._unmutablePeerList.length)\n\t\t{\n\t\t\tconst oldIndex = this._unmutablePeerList.indexOf(peerId);\n\n\t\t\tlet index = oldIndex;\n\n\t\t\tindex--;\n\t\t\tfor (let i = 0; i < this._unmutablePeerList.length; i++)\n\t\t\t{\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tindex = this._unmutablePeerList.length - 1;\n\t\t\t\t}\n\t\t\t\tnewSelectedPeer = this._unmutablePeerList[index];\n\t\t\t\tif (!this._currentSpotlights.includes(newSelectedPeer))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\treturn newSelectedPeer;\n\t}\n\n\tsetPeerSpotlight(peerId)\n\t{\n\t\tlogger.debug('setPeerSpotlight() [peerId:\"%s\"]', peerId);\n\n\t\tconst index = this._selectedSpotlights.indexOf(peerId);\n\t\tif(peerId != 'none'){\n\t\t\tif (index !== -1)\n\t\t\t{\n\t\t\t\tthis._selectedSpotlights = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._selectedSpotlights = [ peerId ];\n\t\t\t}\n\t\t}\n\t\t/*\n\t\tif (index === -1) // We don't have this peer in the list, adding\n\t\t{\n\t\t\tthis._selectedSpotlights.push(peerId);\n\t\t}\n\t\telse // We have this peer, remove\n\t\t{\n\t\t\tthis._selectedSpotlights.splice(index, 1);\n\t\t}\n\t\t*/\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\tsetFixedSpotlight(peerId)\n\t{\n\t\tlogger.debug('setPeerSpotlight() [peerId:\"%s\"]', peerId);\n\n\t\tif(peerId != 'none') {\n\n\t\tconst index = this._selectedSpotlights.indexOf(peerId);\n\n\t\t\n\t\t\t\tthis._selectedSpotlights = [ peerId ];\n\t\t\n\t\t\tthis._fixedSpotlight = [  ];\n\t\t}\n\t\t\n        console.log(\"this._roomType: spotlights after fixed \" + this._selectedSpotlights);\n\t\t/*\n\t\tif (index === -1) // We don't have this peer in the list, adding\n\t\t{\n\t\t\tthis._selectedSpotlights.push(peerId);\n\t\t}\n\t\telse // We have this peer, remove\n\t\t{\n\t\t\tthis._selectedSpotlights.splice(index, 1);\n\t\t}\n\t\t*/\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\t\n\t_handleSignaling()\n\t{\n\t\tthis._signalingSocket.on('notification', (notification) =>\n\t\t{\n\t\t\tif (notification.method === 'newPeer')\n\t\t\t{\n\t\t\t\tconst { id } = notification.data;\n\n\t\t\t\tthis._newPeer(id);\n\t\t\t}\n\n\t\t\tif (notification.method === 'peerClosed')\n\t\t\t{\n\t\t\t\tconst { peerId } = notification.data;\n\n\t\t\t\tthis._closePeer(peerId);\n\t\t\t}\n\t\t});\n\t}\n\n\tclearSpotlights()\n\t{\n\t\tthis._started = false;\n\n\t\tthis._peerList = [];\n\t\tthis._selectedSpotlights = [];\n\t\tthis._currentSpotlights = [];\n\t\tconsole.log(\"this._roomType: clear spotlights \");\n\t}\n\n\t_newPeer(id)\n\t{\n\t\tlogger.debug(\n\t\t\t'room \"newpeer\" event [id: \"%s\"]', id);\n\n\t\tif (this._peerList.indexOf(id) === -1) // We don't have this peer in the list\n\t\t{\n\t\t\tlogger.debug('_handlePeer() | adding peer [peerId: \"%s\"]', id);\n\n\t\t\tthis._peerList.push(id);\n\t\t\tthis._unmutablePeerList.push(id);\n\n\t\t\tif (this._started)\n\t\t\t\tthis._spotlightsUpdated();\n\t\t}\n\t}\n\n\t_closePeer(id)\n\t{\n\t\tlogger.debug(\n\t\t\t'room \"peerClosed\" event [peerId:%o]', id);\n\n\t\tthis._peerList = this._peerList.filter((peer) => peer !== id);\n\t\tthis._unmutablePeerList = this._unmutablePeerList.filter((peer) => peer !== id);\n\n\t\tthis._selectedSpotlights = this._selectedSpotlights.filter((peer) => peer !== id);\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\taddSpeakerList(speakerList)\n\t{\n\t\tthis._peerList = [ ...new Set([ ...speakerList, ...this._peerList ]) ];\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\thandleActiveSpeaker(peerId)\n\t{\n\t\tlogger.debug('handleActiveSpeaker() [peerId:\"%s\"]', peerId);\n\n\t\tconst index = this._peerList.indexOf(peerId);\n\n\t\tif (index > -1)\n\t\t{\n\t\t\tthis._peerList.splice(index, 1);\n\t\t\tthis._peerList = [ peerId ].concat(this._peerList);\n\n\t\t\tthis._spotlightsUpdated();\n\t\t}\n\t}\n\t\n\tgetPeersLength(){\n\t\treturn this._peerList.length;\n\n\n\t}\n\t_spotlightsUpdated()\n\t{\n\t\tlet spotlights;\n\n\t\tif (this._selectedSpotlights.length > 0)\n\t\t{\n\t\t\tspotlights = [ ...new Set([ ...this._selectedSpotlights, ...this._peerList ]) ];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspotlights = this._peerList;\n\t\t}\n\t\tvar start = this._page * this._maxSpotlights;\n\t\tvar end = start + this._maxSpotlights;\n\t\tif(end > this._peerList.length) { end = this._peerList.length;}\n\t\tif (\n\t\t\t!this._arraysEqual(\n\t\t\t\tthis._currentSpotlights, spotlights.slice(start, end)\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tlogger.debug('_spotlightsUpdated() | spotlights updated, emitting');\n\n\t\t\tthis._currentSpotlights = spotlights.slice(start, end);\n\t\t\tconsole.log(\"varun this._roomType: spotlights \"+this._selectedSpotlights);\n\t\t\tconsole.log(\"varun this._roomType: before \"+this._currentSpotlights);\n\t\t\tconsole.log(\"varun this._roomType: fixed \"+this._fixedSpotlight);\n\t\t\t\n\t\t\t//if(this._roomType == 'filmstrip'){\n\t\t\t\tspotlights = [...this._currentSpotlights, ...this._selectedSpotlights, ...this._fixedSpotlight ];\n\t\t\t\tthis._currentSpotlights = spotlights;\n\t\t\t\tconsole.log(\"varun this._roomType: after \"+this._currentSpotlights);\n\t\t\t\n\t\t\t//}\n\t\t\tthis.emit('spotlights-updated', this._currentSpotlights);\n\t\t}\n\t\telse\n\t\t\tlogger.debug('_spotlightsUpdated() | spotlights not updated');\n\t}\n\n\t_arraysEqual(arr1, arr2)\n\t{\n\t\tif (arr1.length !== arr2.length)\n\t\t\treturn false;\n\n\t\tfor (let i = arr1.length; i--;)\n\t\t{\n\t\t\tif (arr1[i] !== arr2[i])\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tget maxSpotlights()\n\t{\n\t\treturn this._maxSpotlights;\n\t}\n\n\tset maxSpotlights(maxSpotlights)\n\t{\n\t\tconst oldMaxSpotlights = this._maxSpotlights;\n\t\t\n\t\tthis._maxSpotlights = maxSpotlights;\n\n\t\tif (oldMaxSpotlights !== this._maxSpotlights)\n\t\t\t{\n\t\t\t\tthis._page = 0;\n\t\t\t\tthis._spotlightsUpdated();\n\t\t\t}\n\t}\n}\n"],"sourceRoot":""}